package generator

import (
	"bytes"
	"context"
	"fmt"
	"text/template"

	runbookv1alpha1 "github.com/guibes/runbook-operator/api/v1alpha1"
)

// RunbookGenerator handles runbook content generation
type RunbookGenerator struct {
	// templates stores the loaded templates
	templates map[string]*template.Template
}

// NewRunbookGenerator creates a new generator instance
func NewRunbookGenerator() *RunbookGenerator {
	return &RunbookGenerator{
		templates: make(map[string]*template.Template),
	}
}

// GenerateMarkdown generates markdown content for a runbook
func (g *RunbookGenerator) GenerateMarkdown(ctx context.Context, runbook *runbookv1alpha1.Runbook) (string, error) {
	templateName := runbook.Spec.Template
	if templateName == "" {
		templateName = "default"
	}

	tmpl, exists := g.templates[templateName]
	if !exists {
		// Load default template if specific template not found
		tmpl = g.getDefaultTemplate()
	}

	var buf bytes.Buffer
	if err := tmpl.Execute(&buf, runbook); err != nil {
		return "", fmt.Errorf("failed to execute template: %w", err)
	}

	return buf.String(), nil
}

// LoadTemplate loads a template from a RunbookTemplate resource
func (g *RunbookGenerator) LoadTemplate(name string, content string) error {
	tmpl, err := template.New(name).Parse(content)
	if err != nil {
		return fmt.Errorf("failed to parse template %s: %w", name, err)
	}

	g.templates[name] = tmpl
	return nil
}

// getDefaultTemplate returns the default runbook template
func (g *RunbookGenerator) getDefaultTemplate() *template.Template {
	defaultTemplate := `# {{ .Spec.AlertName }} Runbook

**Alert**: {{ .Spec.AlertName }}  
**Severity**: {{ .Spec.Severity }}  
**Team**: {{ .Spec.Team }}  

## Impact
{{ .Spec.Content.Impact }}

## Investigation Steps
{{ range $i, $step := .Spec.Content.Investigation }}
{{ add $i 1 }}. **{{ .Description }}**
   {{ if .Command }}
   ` + "```bash" + `
   {{ .Command }}
   ` + "```" + `
   {{ end }}
   {{ if .Expected }}Expected: {{ .Expected }}{{ end }}

{{ end }}

## Remediation Steps
{{ range $i, $step := .Spec.Content.Remediation }}
{{ add $i 1 }}. **{{ .Description }}** {{ if .Risk }}(Risk: {{ .Risk }}){{ end }}
   {{ if .Command }}
   ` + "```bash" + `
   {{ .Command }}
   ` + "```" + `
   {{ end }}

{{ end }}

## Prevention
{{ .Spec.Content.Prevention }}

{{ if .Spec.Content.References }}
## References
{{ range .Spec.Content.References }}
- [{{ .Title }}]({{ .URL }}) ({{ .Type }})
{{ end }}
{{ end }}

---
*Generated by RunbookOperator*
`

	tmpl := template.Must(template.New("default").Funcs(template.FuncMap{
		"add": func(a, b int) int { return a + b },
	}).Parse(defaultTemplate))

	return tmpl
}
